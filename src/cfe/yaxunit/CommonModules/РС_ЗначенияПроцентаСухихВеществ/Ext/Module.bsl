
#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт

	ЮТТесты.ДобавитьТестовыйНабор(НСтр("ru = 'Регистр накопления Значения процента сухих веществ: Проверка формирования движений'")).ВТранзакции()
		.ДобавитьТест("ПроверкаФормированияДвиженийПозитив", НСтр("ru = 'Проверка формирования движений'"), НСтр("ru = 'Позитив, ПроектнаяРабота, Левкина Ольга'"))
		.ДобавитьТест("ПроверкаФормированияДвиженийНегатив", НСтр("ru = 'Проверка формирования движений: выпуск работы'"), НСтр("ru = 'Негатив, ПроектнаяРабота, Левкина Ольга'"))
		;

КонецПроцедуры

Процедура ПроверкаФормированияДвиженийПозитив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ВидНоменклатурыВыходноеИзделие = СоздатьВидНоменклатуры("Test_Конфеты", Истина, Перечисления.ТипыНоменклатуры.Товар);
	НоменклатураВыходноеИзделие = СоздатьНоменклатуру("Test_Конфета", ВидНоменклатурыВыходноеИзделие);
	СерияВыходноеИзделие = СоздатьСериюНоменклатуры("Test_Конфета_001", ВидНоменклатурыВыходноеИзделие);
	
	КоличествоФакт = 10;
	ПроцентСухогоВеществаФакт = 90;
	
	// 2. Выполнение функции.
	ПроизводствоБезЗаказа = ЮТест.Данные().КонструкторОбъекта("Документы.ПроизводствоБезЗаказа")
		.ФикцияОбязательныхПолей()
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("ВыходноеИзделие", НоменклатураВыходноеИзделие)
		.Установить("Серия", СерияВыходноеИзделие)
		.Установить("КоличествоФакт", КоличествоФакт)
		.Установить("ПроцентСухогоВеществаФакт", ПроцентСухогоВеществаФакт)
		.НовыйОбъект()
		;
	ПроизводствоБезЗаказа.Записать(РежимЗаписиДокумента.Проведение);
		
	// 3. Проверка результата.
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрСведений.ЗначенияПроцентаСухихВеществ";
	ОписаниеЗапроса.Условия.Добавить("Регистратор = &Регистратор");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Регистратор", ПроизводствоБезЗаказа.Ссылка);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("ПроцентСухогоВещества");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса)[0].ПроцентСухогоВещества)
		.Равно(ПроцентСухогоВеществаФакт)
		;

КонецПроцедуры

Процедура ПроверкаФормированияДвиженийНегатив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ВидНоменклатурыВыходноеИзделие = СоздатьВидНоменклатуры("Test_Выпечка", Ложь, Перечисления.ТипыНоменклатуры.Работа);
	НоменклатураВыходноеИзделие = СоздатьНоменклатуру("Test_Выпечка", ВидНоменклатурыВыходноеИзделие);
	
	КоличествоФакт = 10;
	ПроцентСухогоВеществаФакт = 90;
	
	// 2. Выполнение функции.
	ПроизводствоБезЗаказа = ЮТест.Данные().КонструкторОбъекта("Документы.ПроизводствоБезЗаказа")
		.ФикцияОбязательныхПолей()
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("ВыходноеИзделие", НоменклатураВыходноеИзделие)
		.Установить("КоличествоФакт", КоличествоФакт)
		.Установить("ПроцентСухогоВеществаФакт", ПроцентСухогоВеществаФакт)
		.НовыйОбъект()
		;
	ПроизводствоБезЗаказа.Записать(РежимЗаписиДокумента.Проведение);
		
	// 3. Проверка результата.
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрСведений.ЗначенияПроцентаСухихВеществ";
	ОписаниеЗапроса.Условия.Добавить("Регистратор = &Регистратор");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Регистратор", ПроизводствоБезЗаказа.Ссылка);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("ПроцентСухогоВещества");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатПустой(ОписаниеЗапроса)).ЭтоИстина();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьВидНоменклатуры(Наименование, ИспользоватьСерии, ТипНоменклатуры)
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.ВидыНоменклатуры")
		.ФикцияОбязательныхПолей()
		.Установить("ТипНоменклатуры", ТипНоменклатуры)
		.Установить("Наименование", Наименование)
		.Установить("ИспользоватьСерии", ИспользоватьСерии)
		;
		
	ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

Функция СоздатьНоменклатуру(Наименование, ВидНоменклатуры)
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Номенклатура")
		.ФикцияОбязательныхПолей()
		.Установить("ВидНоменклатуры", ВидНоменклатуры)
		.Установить("Наименование", Наименование)
		.Установить("ТребуетсяПроверкаЛабораторией", Истина)
		;
		
	ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

Функция СоздатьСериюНоменклатуры(Наименование, ВидНоменклатуры)
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.СерииНоменклатуры")
		.ФикцияОбязательныхПолей()
		.Установить("ВидНоменклатуры", ВидНоменклатуры)
		.Установить("Наименование", Наименование)
		;
		
	ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

Функция СоздатьДокументПроизводствоБезЗаказа(Склад, Номенклатура, Серия, Количество)

	КонструкторРасхода = ЮТест.Данные().КонструкторОбъекта("Документы.ПроизводствоБезЗаказа")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("ВыходноеИзделие, РесурснаяСпецификация, Серия")
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("Склад", Склад)
		.Установить("КоличествоПлан", 1)
		.Установить("КоличествоФакт", 1)
		.ТабличнаяЧасть("МатериалыИРаботы").ДобавитьСтроку()
			.Установить("Номенклатура", Номенклатура)
			.Установить("Серия", Серия)
			.Установить("КоличествоПлан", Количество)
			.Установить("КоличествоФакт", Количество)
		;

	РасходТовара = КонструкторРасхода.Провести();
	
	Возврат РасходТовара;

КонецФункции 

#КонецОбласти