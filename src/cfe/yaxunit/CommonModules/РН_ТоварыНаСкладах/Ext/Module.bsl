
#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт

	ЮТТесты.ДобавитьТестовыйНабор(НСтр("ru = 'Регистр накопления Товары на складах: Проверка полного списания остатков'")).ВТранзакции()
		.ДобавитьТест("ПроверкаПолногоСписанияОстатковПозитив", НСтр("ru = 'Проверка полного списания остатков'"), НСтр("ru = 'Позитив, ПроектнаяРабота, Левкина Ольга'"))
		.ДобавитьТест("ПроверкаПолногоСписанияОстатковНегатив", НСтр("ru = 'Проверка полного списания остатков: Приход больше расхода'"), НСтр("ru = 'Негатив, ПроектнаяРабота, Левкина Ольга'"))
		;

КонецПроцедуры

Процедура ПроверкаПолногоСписанияОстатковПозитив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ВидНоменклатурыМатериал = СоздатьВидНоменклатуры("Test_Мука", Истина);
	НоменклатураМатериал = СоздатьНоменклатуру("Test_Мука", ВидНоменклатурыМатериал);
	СерияМатериал = СоздатьСериюНоменклатуры("Test_Мука_001", ВидНоменклатурыМатериал);
	
	Склад = ЮТест.Данные().СоздатьЭлемент(Справочники.Склады);
	
	КоличествоМатериала = 100;
	
	// 2. Выполнение функции.
	ПриходТовара = СоздатьДокументПриобретениеТоваровУслуг(Склад, НоменклатураМатериал, СерияМатериал, КоличествоМатериала);
	РасходТовара = СоздатьДокументПроизводствоБезЗаказа(Склад, НоменклатураМатериал, СерияМатериал, КоличествоМатериала);
		
	// 3. Проверка результата.
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.ТоварыНаСкладах.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Номенклатура = &Номенклатура");
	ОписаниеЗапроса.Условия.Добавить("Склад = &Склад");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Номенклатура", НоменклатураМатериал);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Склад", Склад);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("КоличествоОстаток");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатПустой(ОписаниеЗапроса)).ЭтоИстина();

КонецПроцедуры

Процедура ПроверкаПолногоСписанияОстатковНегатив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ВидНоменклатурыМатериал = СоздатьВидНоменклатуры("Test_Мука", Истина);
	НоменклатураМатериал = СоздатьНоменклатуру("Test_Мука", ВидНоменклатурыМатериал);
	СерияМатериал = СоздатьСериюНоменклатуры("Test_Мука_001", ВидНоменклатурыМатериал);
	
	Склад = ЮТест.Данные().СоздатьЭлемент(Справочники.Склады);
	
	КоличествоМатериалаПриход = 100;
	КоличествоМатериалаРасход = 90;
	
	// 2. Выполнение функции.
	ПриходТовара = СоздатьДокументПриобретениеТоваровУслуг(Склад, НоменклатураМатериал, СерияМатериал, КоличествоМатериалаПриход);
	РасходТовара = СоздатьДокументПроизводствоБезЗаказа(Склад, НоменклатураМатериал, СерияМатериал, КоличествоМатериалаРасход);
		
	// 3. Проверка результата.
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.ТоварыНаСкладах.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Номенклатура = &Номенклатура");
	ОписаниеЗапроса.Условия.Добавить("Склад = &Склад");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Номенклатура", НоменклатураМатериал);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Склад", Склад);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("КоличествоОстаток");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса)[0].КоличествоОстаток)
		.Равно(КоличествоМатериалаПриход - КоличествоМатериалаРасход)
		;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьВидНоменклатуры(Наименование, ИспользоватьСерии)
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.ВидыНоменклатуры")
		.ФикцияОбязательныхПолей()
		.Установить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар)
		.Установить("Наименование", Наименование)
		.Установить("ИспользоватьСерии", ИспользоватьСерии)
		;
		
	ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

Функция СоздатьНоменклатуру(Наименование, ВидНоменклатуры)
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Номенклатура")
		.ФикцияОбязательныхПолей()
		.Установить("ВидНоменклатуры", ВидНоменклатуры)
		.Установить("Наименование", Наименование)
		.Установить("ТребуетсяПроверкаЛабораторией", Истина)
		;
		
	ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

Функция СоздатьСериюНоменклатуры(Наименование, ВидНоменклатуры)
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.СерииНоменклатуры")
		.ФикцияОбязательныхПолей()
		.Установить("ВидНоменклатуры", ВидНоменклатуры)
		.Установить("Наименование", Наименование)
		;
		
	ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

Функция СоздатьДокументПриобретениеТоваровУслуг(Склад, Номенклатура, Серия, Количество)

	КонструкторПрихода = ЮТест.Данные().КонструкторОбъекта("Документы.ПриобретениеТоваровУслуг")
		.ФикцияОбязательныхПолей()
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.Установить("Склад", Склад)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Номенклатура", Номенклатура)
			.Установить("Серия", Серия)
			.Установить("Количество", Количество)
		;
		
	ПриобретениеТоваровУслуг = КонструкторПрихода.Провести();
	
	Возврат ПриобретениеТоваровУслуг;

КонецФункции 

Функция СоздатьДокументПроизводствоБезЗаказа(Склад, Номенклатура, Серия, Количество)

	КонструкторРасхода = ЮТест.Данные().КонструкторОбъекта("Документы.ПроизводствоБезЗаказа")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("ВыходноеИзделие, РесурснаяСпецификация, Серия")
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("Склад", Склад)
		.Установить("КоличествоПлан", 1)
		.Установить("КоличествоФакт", 1)
		.ТабличнаяЧасть("МатериалыИРаботы").ДобавитьСтроку()
			.Установить("Номенклатура", Номенклатура)
			.Установить("Серия", Серия)
			.Установить("КоличествоПлан", Количество)
			.Установить("КоличествоФакт", Количество)
		;

	РасходТовара = КонструкторРасхода.Провести();
	
	Возврат РасходТовара;

КонецФункции 

#КонецОбласти