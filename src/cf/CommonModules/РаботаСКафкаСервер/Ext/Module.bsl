
#Область ПрограммныйИнтерфейс

Функция ИнициализироватьОтправителя(ПараметрыПодключения, Топик, Раздел) Экспорт
	
	АдресПодключения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПодключения, "Адрес");
	
	ПараметрыОтправителя = РаботаСКафкаСервер.ПараметрыОбъектаКафка();
		
	РаботаСКафкаСервер.СоздатьОтправителя(ПараметрыОтправителя);
	Если Не ПараметрыОтправителя.Успешно Тогда
		Возврат ПараметрыОтправителя;
	КонецЕсли;
	
	ПараметрыОтправителя.Успешно = Ложь;

	Для Каждого КлючИЗначение Из РаботаСКафкаСервер.ГлобальныеПараметрыЗаписи() Цикл
		РезультатУстановкиПараметра = РаботаСКафкаСервер.Отправитель_УстановитьПараметрГлобальный(ПараметрыОтправителя,
			КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Если Не РезультатУстановкиПараметра.Успешно Тогда
			ПараметрыОтправителя.ОписаниеОшибки = РезультатУстановкиПараметра.ОписаниеОшибки;
			Возврат ПараметрыОтправителя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из РаботаСКафкаСервер.ГлобальныеПараметрыЗаписиТопика() Цикл
		РезультатУстановкиПараметра = РаботаСКафкаСервер.Отправитель_УстановитьПараметрТопика(ПараметрыОтправителя,
			КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Если Не РезультатУстановкиПараметра.Успешно Тогда
			ПараметрыОтправителя.ОписаниеОшибки = РезультатУстановкиПараметра.ОписаниеОшибки;
			Возврат ПараметрыОтправителя;
		КонецЕсли;
	КонецЦикла;
		
	РезультатИнициализации = РаботаСКафкаСервер.Отправитель_Инициализировать(ПараметрыОтправителя, АдресПодключения, Топик, Раздел);
	Если Не РезультатИнициализации.Успешно Тогда
		ПараметрыОтправителя.ОписаниеОшибки = РезультатИнициализации.ОписаниеОшибки;
		Возврат ПараметрыОтправителя;
	КонецЕсли;
	
	ПараметрыОтправителя.Успешно = Истина;
		
	Возврат ПараметрыОтправителя;
		
КонецФункции

Функция ИнициализироватьПолучателя(ПараметрыПодключения, Топик, ИДГруппы) Экспорт
	
	АдресПодключения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПодключения, "Адрес");
	
	ПараметрыПолучателя = РаботаСКафкаСервер.ПараметрыОбъектаКафка();
		
	РаботаСКафкаСервер.СоздатьПолучателя(ПараметрыПолучателя);
	Если Не ПараметрыПолучателя.Успешно Тогда
		Возврат ПараметрыПолучателя;
	КонецЕсли;
	
	ПараметрыПолучателя.Успешно = Ложь;
	
	Для Каждого КлючИЗначение Из РаботаСКафкаСервер.ГлобальныеПараметрыЧтения() Цикл
		РезультатУстановкиПараметра = РаботаСКафкаСервер.Получатель_УстановитьПараметрГлобальный(ПараметрыПолучателя,
			КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Если Не РезультатУстановкиПараметра.Успешно Тогда
			ПараметрыПолучателя.ОписаниеОшибки = РезультатУстановкиПараметра.ОписаниеОшибки;
			Возврат ПараметрыПолучателя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из РаботаСКафкаСервер.ГлобальныеПараметрыЧтенияТопика() Цикл
		РезультатУстановкиПараметра = РаботаСКафкаСервер.Получатель_УстановитьПараметрТопика(ПараметрыПолучателя,
			КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Если Не РезультатУстановкиПараметра.Успешно Тогда
			ПараметрыПолучателя.ОписаниеОшибки = РезультатУстановкиПараметра.ОписаниеОшибки;
			Возврат ПараметрыПолучателя;
		КонецЕсли;
	КонецЦикла;

	РезультатИнициализации = РаботаСКафкаСервер.Получатель_Инициализировать(ПараметрыПолучателя, АдресПодключения, ИДГруппы);
	Если Не РезультатИнициализации.Успешно Тогда
		ПараметрыПолучателя.ОписаниеОшибки = РезультатИнициализации.ОписаниеОшибки;
		Возврат ПараметрыПолучателя;
	КонецЕсли;
	
	РезультатИнициализации = РаботаСКафкаСервер.Получатель_Подписаться(ПараметрыПолучателя,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Топик));
	Если Не РезультатИнициализации.Успешно Тогда
		ПараметрыПолучателя.ОписаниеОшибки = РезультатИнициализации.ОписаниеОшибки;
		Возврат ПараметрыПолучателя;
	КонецЕсли;
	
	ПараметрыПолучателя.Успешно = Истина;
		
	Возврат ПараметрыПолучателя;
		
КонецФункции

Функция ПараметрыОбъектаКафка() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ОбъектКафка", Неопределено);
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Возврат Результат;
	
КонецФункции

Функция ГлобальныеПараметрыПросмотра() Экспорт

	Параметры = Новый Соответствие;
	Параметры.Вставить("socket.timeout.ms", "30000");
	
	Возврат Параметры;
		
КонецФункции

Функция ГлобальныеПараметрыЗаписи() Экспорт

	Параметры = Новый Соответствие;
	Параметры.Вставить("queue.buffering.max.messages", "1000000");
	Параметры.Вставить("socket.timeout.ms", "30000");
	Параметры.Вставить("delivery.report.only.error", "false");
	
	Возврат Параметры;
		
КонецФункции

Функция ГлобальныеПараметрыЗаписиТопика() Экспорт

	Параметры = Новый Соответствие;
	Параметры.Вставить("message.timeout.ms", "30000");
	Параметры.Вставить("compression.codec", "lz4");
	Параметры.Вставить("request.required.acks", "-1");
	
	Возврат Параметры;
		
КонецФункции

Функция ГлобальныеПараметрыЧтения() Экспорт

	Параметры = Новый Соответствие;
	Параметры.Вставить("message.max.bytes", "10000");
	Параметры.Вставить("socket.timeout.ms", "30000");
	Параметры.Вставить("enable.auto.commit", "false");
	Параметры.Вставить("auto.commit.interval.ms", "0");
	
	Возврат Параметры;
		
КонецФункции

Функция ГлобальныеПараметрыЧтенияТопика() Экспорт

	Параметры = Новый Соответствие;
	Параметры.Вставить("compression.codec", "lz4");
	Параметры.Вставить("auto.offset.reset", "smallest");
	
	Возврат Параметры;
		
КонецФункции

Функция ПодключитьКомпоненту() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");     
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда	
		МакетКомпоненты = ПолучитьОбщийМакет("librdkafka_win32");
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		МакетКомпоненты = ПолучитьОбщийМакет("librdkafka_win64");
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		МакетКомпоненты = ПолучитьОбщийМакет("librdkafka_linux32");	
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		МакетКомпоненты = ПолучитьОбщийМакет("librdkafka_linux64");		
	Иначе
		Результат.ОписаниеОшибки = "Не поддерживаемая архитектура платформы";
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетКомпоненты);
		_РезультатПодключенияВнешнейКомпоненты = ПодключитьВнешнююКомпоненту(АдресВоВременномХранилище,
			"librdkafka",
			ТипВнешнейКомпоненты.Native);
		Если НЕ _РезультатПодключенияВнешнейКомпоненты Тогда
			Результат.ОписаниеОшибки = "Ошибка подключения внешней компоненты";
			Возврат Результат;
		КонецЕсли;
	Исключение
		Результат.ОписаниеОшибки = ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	Результат.Успешно = Истина;
	
	Возврат Результат;

КонецФункции

// Процедура - Создать клиент администрирования
// 
//Создает объект клиента администрирования
Процедура СоздатьКлиентАдминистрирования(ПараметрыКлиентаАдминистрирования) Экспорт
	
	Если ПараметрыКлиентаАдминистрирования.ОбъектКафка <> Неопределено Тогда
		ПараметрыКлиентаАдминистрирования.Успешно = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ИнициализироватьКомпонентуКлиентаАдминистрирования(ПараметрыКлиентаАдминистрирования.ОбъектКафка) Тогда
		РезультатПодключения = РаботаСКафкаСервер.ПодключитьКомпоненту();
		Если Не РезультатПодключения.Успешно Тогда
			 ПараметрыКлиентаАдминистрирования.ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		ИнициализироватьКомпонентуКлиентаАдминистрирования(ПараметрыКлиентаАдминистрирования.ОбъектКафка)
	 КонецЕсли;
	 
	ПараметрыКлиентаАдминистрирования.Успешно = Истина;

КонецПроцедуры

// Функция - Клиент администрирования установить параметр глобальный
//
// Параметры:
//  стрКлюч		 - 	Строка - Имя параметра
//  стрЗначение	 - 	Строка - Значение параметра
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки
//      Успешно 			- Истина, если параметр установлен
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Устанавливает параметр глабольного контекста для клиента администрирования (глAdminClient)
//	Пример: стрКлюч = socket.timeout.ms стрЗначение = 30000  
//!!Для применения установленных параметров - необходимка повторная инициализация клиента администрирования с помощью функции "КлиентАдминистрирования_Инициализировать"
Функция КлиентАдминистрирования_УстановитьПараметрГлобальный(ПараметрыКлиентаАдминистрирования, Знач стрКлюч, Знач стрЗначение) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	РезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта(ПараметрыКлиентаАдминистрирования);
	Если Не РезультатПроверки.Успешно Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;	
		
	Результат.Успешно = ПараметрыКлиентаАдминистрирования.ОбъектКафка.SetGlobalConf(стрКлюч, стрЗначение);
	Если Результат.Успешно <> Истина Тогда 
		Результат.ОписаниеОшибки = ПараметрыКлиентаАдминистрирования.ОбъектКафка.ErrorDescription;
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

// Функция - Клиент администрирования инициализировать
//
// Параметры:
//  стрСписокБрокеров		 - Строка 	 - Адреса брокеров в формате "10.0.5.187:9092,10.0.5.85:9092,10.0.5.86:9092"
//
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки
//      Успешно 			- Истина, если успешно
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Применяет параметры, установленные функциями "КлиентАдминистрирования_УстановитьПараметрГлобальный", "КлиентАдминистрирования_СброситьПараметры" 
//Открывает соединения до брокера, создает управляющие потоки внутри ВК
Функция КлиентАдминистрирования_Инициализировать(ПараметрыКлиентаАдминистрирования, Знач стрСписокБрокеров) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	РезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта(ПараметрыКлиентаАдминистрирования);
	Если Не РезультатПроверки.Успешно Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;	
		
	Результат.Успешно = ПараметрыКлиентаАдминистрирования.ОбъектКафка.Инициализация(стрСписокБрокеров);
	Если Результат.Успешно <> Истина Тогда 
		Результат.ОписаниеОшибки = ПараметрыКлиентаАдминистрирования.ОбъектКафка.ErrorDescription;
	КонецЕсли;

	
	Возврат Результат;	
КонецФункции    

// Функция - Создать отправителя
// 
// Возвращаемое значение:
//   - Структура - (Успешно, стрОписнаиеОшибки)
//      Успешно 			- Если объект существует
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Создает объект отправителя в глобальной переменной модуля
Процедура СоздатьОтправителя(ПараметрыОтправителя) Экспорт
	
	Если ПараметрыОтправителя.ОбъектКафка <> Неопределено Тогда
		ПараметрыОтправителя.Успешно = Истина;
		Возврат;
	КонецЕсли;
		
	Если Не ИнициализироватьКомпонентуОтправителя(ПараметрыОтправителя.ОбъектКафка) Тогда
		РезультатПодключения = РаботаСКафкаСервер.ПодключитьКомпоненту();
		Если Не РезультатПодключения.Успешно Тогда
			 ПараметрыОтправителя.ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		ИнициализироватьКомпонентуОтправителя(ПараметрыОтправителя.ОбъектКафка)
	КонецЕсли;
	
	ПараметрыОтправителя.Успешно = Истина;

КонецПроцедуры

// Функция - Отправитель установить параметр глобальный
//
// Параметры:
//  стрКлюч		 - 	Строка - Имя параметра
//  стрЗначение	 - 	Строка - Значение параметра
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки)
//      Успешно 			- Истина, если параметр установлен
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Устанавливает параметр глабольного контекста для отправителя (глProducer)
//	Пример: стрКлюч = socket.timeout.ms стрЗначение = 30000  
//!!Для применения установленных параметров - необходимка повторная инициализация получателя с помощью функции "Отправитель_Инициализировать"
Функция Отправитель_УстановитьПараметрГлобальный(ПараметрыОтправителя, Знач стрКлюч, Знач стрЗначение) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	РезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя);
	Если Не РезультатПроверки.Успешно Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;	
		
	Результат.Успешно = ПараметрыОтправителя.ОбъектКафка.SetGlobalConf(стрКлюч, стрЗначение);
	Если Результат.Успешно <> Истина Тогда 
		Результат.ОписаниеОшибки = ПараметрыОтправителя.ОбъектКафка.ErrorDescription;
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

// Функция - Отправитель установить параметр топика
//
// Параметры:
//  стрКлюч		 - 	Строка - Имя параметра
//  стрЗначение	 - 	Строка - Значение параметра
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки)
//      Успешно			- Истина, если параметр установлен
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Устанавливает параметр топика для отправителя (глProducer) 
//	Пример: стрКлюч = auto.offset.reset стрЗначение = smallest  
//!!Для применения установленных параметров - необходимка повторная инициализация получателя с помощью функции "Отправитель_Инициализировать"
Функция Отправитель_УстановитьПараметрТопика(ПараметрыОтправителя, Знач стрКлюч, Знач стрЗначение) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	РезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя);
	Если Не РезультатПроверки.Успешно Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;	
		
	Результат.Успешно = ПараметрыОтправителя.ОбъектКафка.SetTopicConf(стрКлюч, стрЗначение);
	Если Результат.Успешно <> Истина Тогда 
		Результат.ОписаниеОшибки = ПараметрыОтправителя.ОбъектКафка.ErrorDescription;
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

// Функция - Отправитель инициализировать
//
// Параметры:
//  Адрес	 - Строка 	 - Адреса брокера в формате "10.0.5.187:9092" 
//  Топик	 - Стркоа	 - Имя топика
//	Раздел   - Число	 - Номер раздела, если -1 - будет выполнено партиционирование по ключу
//
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки)
//      Успешно 			- Истина, если успешно
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Применяет параметры, установленные функциями "Отправитель_УстановитьПараметрГлобальный", "Отправитель_УстановитьПараметрТопика", "Отправитель_СброситьПараметры" 
//Открывает соединения до брокера, создает управляющие потоки внутри ВК, полностью подготавливает отправителя
Функция Отправитель_Инициализировать(ПараметрыОтправителя, Знач Адрес, Знач Топик, Знач Раздел = -1) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	РезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя);
	Если Не РезультатПроверки.Успешно Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;	

	Результат.Успешно = ПараметрыОтправителя.ОбъектКафка.Initialize(Адрес, Топик, Раздел);
	Если Результат.Успешно <> Истина Тогда 
		Результат.ОписаниеОшибки = ПараметрыОтправителя.ОбъектКафка.ErrorDescription;
	КонецЕсли;              	
	Возврат Результат;	
КонецФункции

// Функция - Создать получателя
// 
// Возвращаемое значение:
//   - Структура - (Успешно, стрОписнаиеОшибки)
//
//Создает объект получателя в глобальной переменной модуля
Процедура СоздатьПолучателя(ПараметрыПолучателя) Экспорт
	
	Если ПараметрыПолучателя.ОбъектКафка <> Неопределено Тогда
		ПараметрыПолучателя.Успешно = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ИнициализироватьКомпонентуПолучателя(ПараметрыПолучателя.ОбъектКафка) Тогда
		РезультатПодключения = РаботаСКафкаСервер.ПодключитьКомпоненту();
		Если Не РезультатПодключения.Успешно Тогда
			 ПараметрыПолучателя.ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		ИнициализироватьКомпонентуПолучателя(ПараметрыПолучателя.ОбъектКафка)
	КонецЕсли;
	
	ПараметрыПолучателя.Успешно = Истина;

КонецПроцедуры

// Функция - Получатель установить параметр глобальный
//
// Параметры:
//  стрКлюч		 - 	Строка - Имя параметра
//  стрЗначение	 - 	Строка - Значение параметра
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки
//      Успешно 			- Истина, если параметр установлен
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Устанавливает параметр глабольного контекста для получателя (глConsumer)
//	Пример: стрКлюч = socket.timeout.ms стрЗначение = 30000  
//!!Для применения установленных параметров - необходимка повторная инициализация получателя с помощью функции "Получатель_Инициализировать"
Функция Получатель_УстановитьПараметрГлобальный(ПараметрыПолучателя, Знач стрКлюч, Знач стрЗначение) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	РезультатПроверки = Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не РезультатПроверки.Успешно Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;	
		
	Результат.Успешно = ПараметрыПолучателя.ОбъектКафка.SetGlobalConf(стрКлюч, стрЗначение);
	Если Результат.Успешно <> Истина Тогда 
		Результат.ОписаниеОшибки = ПараметрыПолучателя.ОбъектКафка.ErrorDescription;
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

// Функция - Получатель установить параметр топика
//
// Параметры:
//  стрКлюч		 - 	Строка - Имя параметра
//  стрЗначение	 - 	Строка - Значение параметра
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки
//      Успешно 			- Истина, если параметр установлен
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Устанавливает параметр топика для получателя (глConsumer) 
//	Пример: стрКлюч = auto.offset.reset стрЗначение = smallest  
//!!Для применения установленных параметров - необходимка повторная инициализация получателя с помощью функции "Получатель_Инициализировать"
Функция Получатель_УстановитьПараметрТопика(ПараметрыПолучателя, Знач стрКлюч, Знач стрЗначение) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	РезультатПроверки = Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не РезультатПроверки.Успешно Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;	
		
	Результат.Успешно = ПараметрыПолучателя.ОбъектКафка.SetTopicConf(стрКлюч, стрЗначение);
	Если Результат.Успешно <> Истина Тогда 
		Результат.ОписаниеОшибки = ПараметрыПолучателя.ОбъектКафка.ErrorDescription;
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

// Функция - Получатель инициализировать
//
// Параметры:
//  стрСписокБрокеров		 - Строка 	 - Адреса брокеров в формате "10.0.5.187:9092,10.0.5.85:9092,10.0.5.86:9092"
//  стрИмяГруппыПолучателей	 - Стркоа	 - Произвольная строка - идентификатор группы получателей
//
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки
//      Успешно 			- Истина, если успешно
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Применяет параметры, установленные функциями "Получатель_УстановитьПараметрГлобальный", "Получатель_УстановитьПараметрТопика", "Получатель_СброситьПараметры" 
//Открывает соединения до брокера, создает управляющие потоки внутри ВК, полностью подготавливает получателя для чтения данных
Функция Получатель_Инициализировать(ПараметрыПолучателя, Знач стрСписокБрокеров, Знач стрИмяГруппыПолучателей) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	РезультатПроверки = Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не РезультатПроверки.Успешно Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;	
		
	Результат.Успешно = ПараметрыПолучателя.ОбъектКафка.Инициализация(стрСписокБрокеров, стрИмяГруппыПолучателей);
	Если Результат.Успешно <> Истина Тогда 
		Результат.ОписаниеОшибки = ПараметрыПолучателя.ОбъектКафка.ErrorDescription;
	КонецЕсли;

	
	Возврат Результат;	
КонецФункции

// Функция - Получатель подписаться
//
// Параметры:
//  мТопики	 - Массив	 - Массив строк, содержащих имена топиков, на которые необходимо подписаться
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки
//      Успешно 			- Истина, если успешно
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Выполняет подписку на список переданных топиков
//Необходимо вызывать после инициализации
//Предполагает автоматическое распределение партиций топиков на получателей внутри группы
//	(т.е. если подписано на топик несколько получателей, с одной и той же группой - партиции будут распределены между ними брокером автоматически)
Функция Получатель_Подписаться(ПараметрыПолучателя, Знач мТопики) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	РезультатПроверки = Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не РезультатПроверки.Успешно Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;	
	
	РезультатПодписки = ПараметрыПолучателя.ОбъектКафка.ClearSubscribeList();
	Если РезультатПодписки <> Истина Тогда
		Результат.ОписаниеОшибки = "Ошибка очистки списка топиков: " + ПараметрыПолучателя.ОбъектКафка.ErrorDescription;	
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого стрТопик Из мТопики Цикл 
		РезультатПодписки = ПараметрыПолучателя.ОбъектКафка.AddTopicToSubscribeList(стрТопик);
		Если РезультатПодписки <> Истина Тогда
			Результат.ОписаниеОшибки = "Ошибка добавления топика в список: " + ПараметрыПолучателя.ОбъектКафка.ErrorDescription;	
			Возврат Результат;
		КонецЕсли;	
	КонецЦикла;
	
	РезультатПодписки = ПараметрыПолучателя.ОбъектКафка.Subscribe();
	Если РезультатПодписки <> Истина Тогда
		Результат.ОписаниеОшибки = "Ошибка подписания на топики: " + ПараметрыПолучателя.ОбъектКафка.ErrorDescription;	
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успешно = Истина;	
	Возврат Результат;	
КонецФункции

// Функция - Отправитель проверить доступность объекта 
// 
// Возвращаемое значение:
//   - Структура - (Успешно, стрОписнаиеОшибки)
//      Успешно 			- Если объект существует
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Проверяет, существует ли объект получателя и возможна ли работа с ним
Функция Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Если НЕ ИнициализироватьКомпонентуОтправителя(Неопределено) Тогда
		Результат.ОписаниеОшибки = "Не подключена внешняя компонента";
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыОтправителя.ОбъектКафка = Неопределено Тогда
		Результат.ОписаниеОшибки = "Не создан отправитель";
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успешно = Истина;
	Возврат Результат;	
КонецФункции

// Функция - Получтатель проверить доступность объекта 
// 
// Возвращаемое значение:
//   - Структура - (Успешно, стрОписнаиеОшибки
//      Успешно 			- Если объект существует
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Проверяет, существует ли объект получателя и возможна ли работа с ним
Функция Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Если НЕ ИнициализироватьКомпонентуПолучателя(Неопределено) Тогда
		Результат.ОписаниеОшибки = "Не подключена внешняя компонента";
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыПолучателя.ОбъектКафка = Неопределено Тогда
		Результат.ОписаниеОшибки = "Не создан отправитель";
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успешно = Истина;
	Возврат Результат;	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьКомпонентуКлиентаАдминистрирования(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.librdkafka.KafkaAdminClient");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Функция - Клиент администрирования проверить доступность объекта 
// 
// Возвращаемое значение:
//   - Структура - (Успешно, стрОписнаиеОшибки
//      Успешно 			- Если объект существует
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Проверяет, существует ли объект клиента администрирования и возможна ли работа с ним
Функция КлиентАдминистрирования_ПроверитьДоступностьОбъекта(ПараметрыКлиентаАдминистрирования)

	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Если НЕ ИнициализироватьКомпонентуКлиентаАдминистрирования(Неопределено) Тогда
		Результат.ОписаниеОшибки = "Не подключена внешняя компонента";
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыКлиентаАдминистрирования.ОбъектКафка = Неопределено Тогда
		Результат.ОписаниеОшибки = "Не создан клиент администрирования";
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успешно = Истина;
	Возврат Результат;	
КонецФункции

Функция ИнициализироватьКомпонентуОтправителя(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.librdkafka.KafkaProducer");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ИнициализироватьКомпонентуПолучателя(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.librdkafka.KafkaConsumer");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти
