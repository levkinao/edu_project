
#Область ПрограммныйИнтерфейс

Процедура ЗарегистрироватьИзмененияВИсходящихСообщенияхКОбработке(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъектаМетаданных = Источник.Метаданные().ПолноеИмя();
	МаршрутыДляОбъектаМетаданных = УправлениеОбменомПовтИсп.МаршрутыДляОбъектаМетаданных(
		ПолноеИмяОбъектаМетаданных, Источник.Ссылка);
	
	Если Не МаршрутыДляОбъектаМетаданных.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Маршрут Из МаршрутыДляОбъектаМетаданных Цикл
		ИдентификаторСообщения = СоздатьИсходящееСообщение(Маршрут, Источник);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьИсходящееСообщение(Маршрут, ДанныеИБ) Экспорт 
	
	ИдентификаторСообщения = Справочники.ИсходящиеСообщенияKafka.ПолучитьСсылку(Новый УникальныйИдентификатор);

	СправочникОбъект = Справочники.ИсходящиеСообщенияKafka.СоздатьЭлемент();
	СправочникОбъект.УстановитьСсылкуНового(ИдентификаторСообщения);

	СправочникОбъект.Наименование = Строка(ИдентификаторСообщения.УникальныйИдентификатор());
	СправочникОбъект.ДанныеИБ = ДанныеИБ.Ссылка;
	СправочникОбъект.Маршрут = Маршрут;
	
	СправочникОбъект.ТекстСообщения = СформироватьТекстСообщения(ДанныеИБ);
	
	СправочникОбъект.Записать();
	
	ЗарегистрироватьСообщениеКОтправке(Маршрут, СправочникОбъект.Ссылка);
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Процедура ЗарегистрироватьСообщениеКОтправке(Маршрут, ИдентификаторСообщения) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ИсходящиеСообщенияКафкаКОтправке.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Маршрут = Маршрут;
	МенеджерЗаписи.ИдентификаторСообщения = ИдентификаторСообщения;
	МенеджерЗаписи.ДатаРегистрации = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура лимсЗарегистрироватьИзмененияВИсходящихСообщенияхКОбработке(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъектаМетаданных = Источник.Метаданные().ПолноеИмя();
	МаршрутыДляОбъектаМетаданных = УправлениеОбменомПовтИсп.лимсМаршрутыДляОбъектаМетаданных(
		ПолноеИмяОбъектаМетаданных, Источник.Ссылка);
	
	Если Не МаршрутыДляОбъектаМетаданных.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Маршрут Из МаршрутыДляОбъектаМетаданных Цикл
		ИдентификаторСообщения = лимсСоздатьИсходящееСообщение(Маршрут, Источник);
	КонецЦикла;
	
КонецПроцедуры

Функция лимсСоздатьИсходящееСообщение(Маршрут, ДанныеИБ) Экспорт 
	
	ИдентификаторСообщения = Справочники.лимсИсходящиеСообщенияKafka.ПолучитьСсылку(Новый УникальныйИдентификатор);

	СправочникОбъект = Справочники.лимсИсходящиеСообщенияKafka.СоздатьЭлемент();
	СправочникОбъект.УстановитьСсылкуНового(ИдентификаторСообщения);

	СправочникОбъект.Наименование = Строка(ИдентификаторСообщения.УникальныйИдентификатор());
	СправочникОбъект.ДанныеИБ = ДанныеИБ.Ссылка;
	СправочникОбъект.Маршрут = Маршрут;
	
	СправочникОбъект.ТекстСообщения = лимсСформироватьТекстСообщения(ДанныеИБ);
	
	СправочникОбъект.Записать();
	
	лимсЗарегистрироватьСообщениеКОтправке(Маршрут, СправочникОбъект.Ссылка);
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Процедура лимсЗарегистрироватьСообщениеКОтправке(Маршрут, ИдентификаторСообщения) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.лимсИсходящиеСообщенияКафкаКОтправке.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Маршрут = Маршрут;
	МенеджерЗаписи.ИдентификаторСообщения = ИдентификаторСообщения;
	МенеджерЗаписи.ДатаРегистрации = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьТекстСообщения(ДанныеИБ)
	
	ТекстСообщения = "";
	
	Если ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		ТекстСообщения = ТекстСообщенияПриобретениеТоваровУслуг(ДанныеИБ);
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ТекстСообщенияПриобретениеТоваровУслуг(ДанныеИБ)

	Данные = Новый Структура;
	Данные.Вставить("Type", "ПриобретениеТоваровУслуг");
	Данные.Вставить("Ref", Строка(ДанныеИБ.Ссылка.УникальныйИдентификатор()));
	Данные.Вставить("DeletionMark", ДанныеИБ.ПометкаУдаления);
	Данные.Вставить("Date", ДанныеИБ.Дата);
	Данные.Вставить("Number", ДанныеИБ.Номер);
	Данные.Вставить("Posted", ДанныеИБ.Проведен);
	Данные.Вставить("Склад", Строка(ДанныеИБ.Склад.УникальныйИдентификатор()));
	Данные.Вставить("Комментарий", ДанныеИБ.Комментарий);
	Данные.Вставить("Товары", Новый Массив);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ПриобретениеТоваровУслугТовары.Номенклатура) КАК Номенклатура,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ПриобретениеТоваровУслугТовары.Серия) КАК Серия,
	|	ПриобретениеТоваровУслугТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.Номенклатура.ТребуетсяПроверкаЛабораторией, ЛОЖЬ) = ИСТИНА
	|	И ПриобретениеТоваровУслугТовары.Ссылка = &ДанныеИБ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриобретениеТоваровУслугТовары.НомерСтроки";
	
	Запрос.УстановитьПараметр("ДанныеИБ", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СтруктураТовары = Новый Структура;
		Для каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
			СтруктураТовары.Вставить(КолонкаЗапроса.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();	
		
		Пока Выборка.Следующий() Цикл
			ТекущаяСтруктураТовары = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СтруктураТовары);
			ЗаполнитьЗначенияСвойств(ТекущаяСтруктураТовары, Выборка);
			ТекущаяСтруктураТовары.Номенклатура = Строка(ТекущаяСтруктураТовары.Номенклатура);
			ТекущаяСтруктураТовары.Серия = Строка(ТекущаяСтруктураТовары.Серия);
			Данные.Товары.Добавить(ТекущаяСтруктураТовары);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	ТекстСообщения = ЗаписьJSON.Закрыть();
	
	Возврат ТекстСообщения;

КонецФункции

Функция лимсСформироватьТекстСообщения(ДанныеИБ)
	
	ТекстСообщения = "";
	
	Если ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.лимсЛабораторноеИсследование") Тогда
		ТекстСообщения = ТекстСообщениялимсЛабораторноеИсследование(ДанныеИБ);
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ТекстСообщениялимсЛабораторноеИсследование(ДанныеИБ)

	ИдентификаторПТиУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование,
		"ИдентификаторЕРП");
	
	Данные = Новый Структура;
	Данные.Вставить("Type", "лимсЛабораторноеИсследование");
	Данные.Вставить("Ref", Строка(ДанныеИБ.Ссылка.УникальныйИдентификатор()));
	Данные.Вставить("DeletionMark", ДанныеИБ.ПометкаУдаления);
	Данные.Вставить("Date", ДанныеИБ.Дата);
	Данные.Вставить("Number", ДанныеИБ.Номер);
	Данные.Вставить("Posted", ДанныеИБ.Проведен);
	Данные.Вставить("ДокументОснование", ИдентификаторПТиУ);
	Данные.Вставить("Комментарий", ДанныеИБ.Комментарий);
	Данные.Вставить("Товары", Новый Массив);

	СтруктураТовары = Новый Структура("Номенклатура, Серия, ПроцентСухогоВещества");
	Для Каждого СтрокаТовары Из ДанныеИБ.Товары Цикл
		ТекущаяСтруктураТовары = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СтруктураТовары);
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураТовары, СтрокаТовары);
		ТекущаяСтруктураТовары.Номенклатура = Строка(ТекущаяСтруктураТовары.Номенклатура.УникальныйИдентификатор());
		ТекущаяСтруктураТовары.Серия = Строка(ТекущаяСтруктураТовары.Серия.УникальныйИдентификатор());
		Данные.Товары.Добавить(ТекущаяСтруктураТовары);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	ТекстСообщения = ЗаписьJSON.Закрыть();
	
	Возврат ТекстСообщения;

КонецФункции

#КонецОбласти
