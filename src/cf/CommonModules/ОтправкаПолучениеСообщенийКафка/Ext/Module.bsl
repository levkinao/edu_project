
#Область ПрограммныйИнтерфейс

Процедура ОтправитьСообщенияВЛИМС() Экспорт
	
	КлючСообщенияЖурналаРегистрации = НСтр("ru = 'Отправка сообщений в 1С:LIMS'");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходящиеСообщенияКафкаКОтправке.Маршрут.ПараметрыПодключения КАК ПараметрыПодключения,
	|	ИсходящиеСообщенияКафкаКОтправке.Маршрут КАК Маршрут,
	|	ИсходящиеСообщенияКафкаКОтправке.Маршрут.Топик КАК Топик,
	|	ИсходящиеСообщенияКафкаКОтправке.Маршрут.Раздел КАК Раздел,
	|	ИсходящиеСообщенияКафкаКОтправке.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ИсходящиеСообщенияКафкаКОтправке.ИдентификаторСообщения.ДанныеИБ КАК ДанныеИБ,
	|	ИсходящиеСообщенияКафкаКОтправке.ИдентификаторСообщения.ТекстСообщения КАК ТекстСообщения
	|ИЗ
	|	РегистрСведений.ИсходящиеСообщенияКафкаКОтправке КАК ИсходящиеСообщенияКафкаКОтправке
	|ИТОГИ ПО
	|	Маршрут";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		КоличествоСообщений = 0;
		
		ВыборкаМаршрут = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМаршрут.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				
				мДанныеНаЗапись = Новый Массив;
			
				мЗаголовки = Новый Массив;
				мЗаголовки.Добавить(Новый Структура("data", "reference"));
				
				ВыборкаСообщения = ВыборкаМаршрут.Выбрать();
				Пока ВыборкаСообщения.Следующий() Цикл
					
					мДанныеНаЗапись.Добавить(Новый Структура("Key, Value, Headers",
						XMLСтрока(ВыборкаСообщения.ДанныеИБ), ВыборкаСообщения.ТекстСообщения, мЗаголовки));
					
					НаборЗаписей = РегистрыСведений.ИсходящиеСообщенияКафкаКОтправке.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Маршрут.Установить(ВыборкаСообщения.Маршрут);
					НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ВыборкаСообщения.ИдентификаторСообщения);
					НаборЗаписей.Записать();
					
					КоличествоСообщений = КоличествоСообщений + 1;
					
				КонецЦикла;
				
				ПараметрыОтправителя = РаботаСКафкаСервер.ИнициализироватьОтправителя(
					ВыборкаМаршрут.ПараметрыПодключения,
					ВыборкаМаршрут.Топик,
					ВыборкаМаршрут.Раздел);
				
				ОтправитьСообщения(ПараметрыОтправителя, мДанныеНаЗапись);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации,
					УровеньЖурналаРегистрации.Ошибка,,,
					СтрШаблон(НСтр("ru = 'Не удалось отправить сообщения по причине: %1'"),
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический(
			"ОтправкаСообщенийВЛИМС",
			ВремяНачала,
			КоличествоСообщений);
		
	КонецЕсли;

КонецПроцедуры

Процедура лимсПолучитьСообщенияИзЕРП() Экспорт
	
	КлючСообщенияЖурналаРегистрации = НСтр("ru = '(1С:LIMS) Получение сообщений из 1С:ERP'");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	лимсМаршрутыКафка.ПараметрыПодключения КАК ПараметрыПодключения,
	|	лимсМаршрутыКафка.Топик КАК Топик,
	|	лимсМаршрутыКафка.ИДГруппы КАК ИДГруппы
	|ИЗ
	|	Справочник.лимсМаршрутыКафка КАК лимсМаршрутыКафка
	|ГДЕ
	|	лимсМаршрутыКафка.ВидМаршрута = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		КоличествоСообщений = 0;
		
		ВыборкаМаршрут = РезультатЗапроса.Выбрать();
		Пока ВыборкаМаршрут.Следующий() Цикл
			
			ПараметрыПолучателя = РаботаСКафкаСервер.ИнициализироватьПолучателя(
				ВыборкаМаршрут.ПараметрыПодключения,
				ВыборкаМаршрут.Топик,
				ВыборкаМаршрут.ИДГруппы);
			
			НачатьТранзакцию();
			Попытка
				
				ДанныеСообщений = ПолучитьСообщения(ПараметрыПолучателя);
						
				Для Каждого Элемент Из ДанныеСообщений Цикл
					ТекстСообщения = Элемент.value;
					лимсЗагрузитьДанныеСообщенияВИБ(ТекстСообщения);
					КоличествоСообщений = КоличествоСообщений + 1;
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации,
					УровеньЖурналаРегистрации.Ошибка,,,
					СтрШаблон(НСтр("ru = 'Не удалось получить сообщения по причине: %1'"),
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический(
			"лимсПолучениеСообщенийИзERP",
			ВремяНачала,
			КоличествоСообщений);
		
	КонецЕсли;

КонецПроцедуры

Процедура лимсОтправитьСообщенияВЕРП() Экспорт
	
	КлючСообщенияЖурналаРегистрации = НСтр("ru = '(1С:LIMS) Отправка сообщений в 1С:ERP'");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	лимсИсходящиеСообщенияКафкаКОтправке.Маршрут.ПараметрыПодключения КАК ПараметрыПодключения,
	|	лимсИсходящиеСообщенияКафкаКОтправке.Маршрут КАК Маршрут,
	|	лимсИсходящиеСообщенияКафкаКОтправке.Маршрут.Топик КАК Топик,
	|	лимсИсходящиеСообщенияКафкаКОтправке.Маршрут.Раздел КАК Раздел,
	|	лимсИсходящиеСообщенияКафкаКОтправке.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	лимсИсходящиеСообщенияКафкаКОтправке.ИдентификаторСообщения.ДанныеИБ КАК ДанныеИБ,
	|	лимсИсходящиеСообщенияКафкаКОтправке.ИдентификаторСообщения.ТекстСообщения КАК ТекстСообщения
	|ИЗ
	|	РегистрСведений.лимсИсходящиеСообщенияКафкаКОтправке КАК лимсИсходящиеСообщенияКафкаКОтправке
	|ИТОГИ ПО
	|	Маршрут";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		КоличествоСообщений = 0;
		
		ВыборкаМаршрут = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМаршрут.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				
				мДанныеНаЗапись = Новый Массив;
			
				мЗаголовки = Новый Массив;
				мЗаголовки.Добавить(Новый Структура("data", "reference"));
				
				ВыборкаСообщения = ВыборкаМаршрут.Выбрать();
				Пока ВыборкаСообщения.Следующий() Цикл
					
					мДанныеНаЗапись.Добавить(Новый Структура("Key, Value, Headers",
						XMLСтрока(ВыборкаСообщения.ДанныеИБ), ВыборкаСообщения.ТекстСообщения, мЗаголовки));
					
					НаборЗаписей = РегистрыСведений.лимсИсходящиеСообщенияКафкаКОтправке.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Маршрут.Установить(ВыборкаСообщения.Маршрут);
					НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ВыборкаСообщения.ИдентификаторСообщения);
					НаборЗаписей.Записать();
					
					КоличествоСообщений = КоличествоСообщений + 1;
					
				КонецЦикла;
				
				ПараметрыОтправителя = РаботаСКафкаСервер.ИнициализироватьОтправителя(
					ВыборкаМаршрут.ПараметрыПодключения,
					ВыборкаМаршрут.Топик,
					ВыборкаМаршрут.Раздел);
				
				ОтправитьСообщения(ПараметрыОтправителя, мДанныеНаЗапись);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации,
					УровеньЖурналаРегистрации.Ошибка,,,
					СтрШаблон(НСтр("ru = 'Не удалось отправить сообщения по причине: %1'"),
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический(
			"лимсОтправкаСообщенийВERP",
			ВремяНачала,
			КоличествоСообщений);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьСообщенияИзЛИМС() Экспорт
	
	КлючСообщенияЖурналаРегистрации = НСтр("ru = 'Получение сообщений из 1С:LIMS'");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутыКафка.ПараметрыПодключения КАК ПараметрыПодключения,
	|	МаршрутыКафка.Топик КАК Топик,
	|	МаршрутыКафка.ИДГруппы КАК ИДГруппы
	|ИЗ
	|	Справочник.МаршрутыКафка КАК МаршрутыКафка
	|ГДЕ
	|	МаршрутыКафка.ВидМаршрута = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		КоличествоСообщений = 0;
		
		ВыборкаМаршрут = РезультатЗапроса.Выбрать();
		Пока ВыборкаМаршрут.Следующий() Цикл
			
			ПараметрыПолучателя = РаботаСКафкаСервер.ИнициализироватьПолучателя(
				ВыборкаМаршрут.ПараметрыПодключения,
				ВыборкаМаршрут.Топик,
				ВыборкаМаршрут.ИДГруппы);
			
			НачатьТранзакцию();
			Попытка
				
				ДанныеСообщений = ПолучитьСообщения(ПараметрыПолучателя);
						
				Для Каждого Элемент Из ДанныеСообщений Цикл
					ТекстСообщения = Элемент.value;
					ЗагрузитьДанныеСообщенияВИБ(ТекстСообщения);
					КоличествоСообщений = КоличествоСообщений + 1;
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации,
					УровеньЖурналаРегистрации.Ошибка,,,
					СтрШаблон(НСтр("ru = 'Не удалось получить сообщения по причине: %1'"),
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический(
			"ПолучениеСообщенийИзLIMS",
			ВремяНачала,
			КоличествоСообщений);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтправкаСообщений

Процедура ОтправитьСообщения(ПараметрыОтправителя, мДанныеНаЗапись)
	
	РезультатПреобразования = СтруктуруВJSON(мДанныеНаЗапись);
	стрДанные = "" + РезультатПреобразования.стрДанные;
	РезультатЗагрузки = Отправитель_ЗагрузитьСообщенияИзJSONВСписокНаОтправку(ПараметрыОтправителя, стрДанные);
	Если Не РезультатЗагрузки.Успешно Тогда
		ВызватьИсключение РезультатЗагрузки.ОписаниеОшибки;
	КонецЕсли;

	сткРезультат = Отправитель_ДекодироватьКлючСообщенияКакBase64Строку(ПараметрыОтправителя);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;
	КонецЕсли;
	сткРезультат = Отправитель_ДекодироватьТелоСообщенияКакBase64Строку(ПараметрыОтправителя);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;
	КонецЕсли;
	сткРезультат = Отправитель_ДекодироватьЗначенияЗаголовковКакBase64Строку(ПараметрыОтправителя);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;
	КонецЕсли;
			
	сткРезультат = Отправитель_Отправить(ПараметрыОтправителя);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;
	КонецЕсли;

	сткРезультат = Отправитель_ВсеСообщенияДоставлены(ПараметрыОтправителя);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция Отправитель_ДекодироватьКлючСообщенияКакBase64Строку(ПараметрыОтправителя, булДекодировать = Ложь)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");	
	
	сткРезультатПроверки = РаботаСКафкаСервер.Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	ПараметрыОтправителя.ОбъектКафка.DecodeBase64Key = булДекодировать;
	сткРезультат.Успешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Отправитель_ДекодироватьТелоСообщенияКакBase64Строку(ПараметрыОтправителя, булДекодировать = Ложь)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");	
	
	сткРезультатПроверки = РаботаСКафкаСервер.Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	ПараметрыОтправителя.ОбъектКафка.DecodeBase64Value = булДекодировать;
	сткРезультат.Успешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Отправитель_ДекодироватьЗначенияЗаголовковКакBase64Строку(ПараметрыОтправителя, булДекодировать = Ложь)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");	
	
	сткРезультатПроверки = РаботаСКафкаСервер.Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	ПараметрыОтправителя.ОбъектКафка.DecodeBase64HeadersValue = булДекодировать;
	сткРезультат.Успешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

// Функция - Отправитель все сообщения доставлены
// 
// Возвращаемое значение:
// - Структура - (Успешно, булВсеСообщенияДоставлены, стрОписнаиеОшибки)
//      Успешно 					- Истина, если успешно
//		булВсеСообщенияДоставлены	- Истина, если все сообщения из внутреннего пула сообщений ВК были успешно доставлены (после вызова "Отправитель_Отправить")
//		ОписаниеОшибки 			- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Получает признак успешности обработки пула сообщений (булВсеСообщенияДоставлены = Истина, ели все сообщения из пула успешно доставлены, после вызова функции "Отправитель_Отправить")
Функция Отправитель_ВсеСообщенияДоставлены(ПараметрыОтправителя)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Истина);
	сткРезультат.Вставить("булВсеСообщенияДоставлены", Ложь);

	сткРезультат.Вставить("ОписаниеОшибки", "");
	
	сткРезультатПроверки = РаботаСКафкаСервер.Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булВсеСообщенияДоставлены = ПараметрыОтправителя.ОбъектКафка.IsDelivered();
	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель получить JSONОтчет о доставке
// (БЫСТРЫЙ СПОСОБ)
// Возвращаемое значение:
// - Структура - (Успешно, стрОтчетОДоставке, стрОписнаиеОшибки)
//      Успешно 					- Истина, если успешно
//		стрОтчетОДоставке			- JSON отчет о доставке
//		ОписаниеОшибки 			- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Возвращает массив структур в формате JSON - отчет о доставке (колонки: key, status, topic, partition, timestamp, offset, error)
Функция Отправитель_ПолучитьJSONОтчетОДоставке(ПараметрыОтправителя)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("стрОтчетОДоставке", Неопределено);
	сткРезультат.Вставить("ОписаниеОшибки", "");
	
	сткРезультатПроверки = РаботаСКафкаСервер.Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.стрОтчетОДоставке = ПараметрыОтправителя.ОбъектКафка.GetJSONDeliveryReport();	
	Если сткРезультат.стрОтчетОДоставке = Неопределено Тогда
		сткРезультат.ОписаниеОшибки = ПараметрыОтправителя.ОбъектКафка.ErrorDescription;
		Возврат сткРезультат;	
	КонецЕсли;

	сткРезультат.Успешно = Истина;
	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель отправить
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки)
//      Успешно 					- Истина, если успешно
//		ОписаниеОшибки 			- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Выполняет отправку из внутреннего пула сообщений ВК, очищает этот пул
Функция Отправитель_Отправить(ПараметрыОтправителя)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");
	
	сткРезультатПроверки = РаботаСКафкаСервер.Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.Успешно = ПараметрыОтправителя.ОбъектКафка.Produce();	
	Если сткРезультат.Успешно <> Истина Тогда
		сткРезультат.ОписаниеОшибки = ПараметрыОтправителя.ОбъектКафка.ErrorDescription;
		Возврат сткРезультат;	
	КонецЕсли;

	сткРезультат.Успешно = Истина;
	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель загрузить сообщения из JSON в список на отправку
//
// Параметры:
//  стрJSON		 - Строка	 - JSON в формате "[{"Key": "Ключ", "Value": "Сообщение", "Headers": [{"Заголовок1": "ЗначениеЗаголовка1"}]}]"
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки)
//      Успешно 			- Истина, если успешно
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Загружает список сообщений из JSON в внутренний пул ВК на отправку
Функция Отправитель_ЗагрузитьСообщенияИзJSONВСписокНаОтправку(ПараметрыОтправителя, Знач стрJSON)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");
	
	сткРезультатПроверки = РаботаСКафкаСервер.Отправитель_ПроверитьДоступностьОбъекта(ПараметрыОтправителя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	

	сткРезультат.Успешно = ПараметрыОтправителя.ОбъектКафка.SetJSONMessageList(стрJSON);
	Если сткРезультат.Успешно <> Истина Тогда 
		сткРезультат.ОписаниеОшибки = ПараметрыОтправителя.ОбъектКафка.ErrorDescription;
	КонецЕсли;

	Возврат сткРезультат;	
КонецФункции

Функция СтруктуруВJSON(п_сткДанные)
	
	_сткРезультат = Новый Структура();
	
	_сткРезультат.Вставить("Успешно",        Ложь);
	_сткРезультат.Вставить("стрДанные", 	    "");
	_сткРезультат.Вставить("ОписаниеОшибки", "");
	
	_ЗаписьJSON                = Новый ЗаписьJSON();
	_НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON();
	
	_ЗаписьJSON.УстановитьСтроку();
	
	_НастройкиСериализацииJSON.ВариантЗаписиДаты      = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	_НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Попытка
		ЗаписатьJSON(_ЗаписьJSON, п_сткДанные, _НастройкиСериализацииJSON);
		
		_сткРезультат.стрДанные  = _ЗаписьJSON.Закрыть();
		_сткРезультат.Успешно = Истина;
	Исключение
		_сткРезультат.ОписаниеОшибки = ОписаниеОшибки();	
	КонецПопытки;
	
	Возврат _сткРезультат;   	
КонецФункции

#КонецОбласти

#Область ПолучениеСообщений

Функция ПолучитьСообщения(ПараметрыПолучателя)
	
	чслПрочитатьКоличество_Чтение = 1000;
	чслТаймаутПоУмолчанию = 3000;
	
	чслЧтение = Число(XMLСтрока(чслПрочитатьКоличество_Чтение));
	чслТаймаут = Число(XMLСтрока(чслТаймаутПоУмолчанию));
	ЧитатьДвоичныеДанные = Ложь;
	булНеЭкранироватьСообщение = Ложь;
	
	сткРезультат = Получатель_ЭкранироватьЗначениеСообщения(ПараметрыПолучателя, НЕ булНеЭкранироватьСообщение);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;	
	КонецЕсли;	
	
	сткРезультат = Получатель_ЭкранироватьКлючСообщения(ПараметрыПолучателя, НЕ булНеЭкранироватьСообщение);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;	
	КонецЕсли;	
	
	сткРезультат = Получатель_ЭкранироватьКлючиЗаголовков(ПараметрыПолучателя, НЕ булНеЭкранироватьСообщение);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;	
	КонецЕсли;	
	
	сткРезультат = Получатель_ЭкранироватьЗначенияЗаголовков(ПараметрыПолучателя, НЕ булНеЭкранироватьСообщение);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;	
	КонецЕсли;	

	сткРезультат = Получатель_ПрочитатьСписокСообщенийВПул(ПараметрыПолучателя, чслЧтение, чслТаймаут, 10);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;	
	КонецЕсли;	
	
	сткРезультат = Получатель_ПолучитьСообщенияИзПулаJSON(ПараметрыПолучателя, ЧитатьДвоичныеДанные);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;	
	КонецЕсли;	
		
	сткРезультат = JSONВСтруктуру(сткРезультат.стрСообщения);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;	
	КонецЕсли;	
	
	Если сткРезультат.масДанные.Количество() > 0 Тогда		
		сткРезультатФиксации = Получатель_ЗафиксироватьСмещения(ПараметрыПолучателя);
		Если Не сткРезультатФиксации.Успешно Тогда
			ВызватьИсключение сткРезультатФиксации.ОписаниеОшибки;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат сткРезультат.масДанные;
	
КонецФункции

Функция Получатель_ЭкранироватьКлючСообщения(ПараметрыПолучателя, булЭкранировать = Истина)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");	
	
	сткРезультатПроверки = РаботаСКафкаСервер.Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	ПараметрыПолучателя.ОбъектКафка.EscapeMessageKey = булЭкранировать;
	сткРезультат.Успешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Получатель_ЭкранироватьЗначениеСообщения(ПараметрыПолучателя, булЭкранировать = Истина)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");	
	
	сткРезультатПроверки = РаботаСКафкаСервер.Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	ПараметрыПолучателя.ОбъектКафка.EscapeMessageValue = булЭкранировать;
	сткРезультат.Успешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Получатель_ЭкранироватьКлючиЗаголовков(ПараметрыПолучателя, булЭкранировать = Истина)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");	
	
	сткРезультатПроверки = РаботаСКафкаСервер.Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	ПараметрыПолучателя.ОбъектКафка.EscapeMessageHeaderKey = булЭкранировать;
	сткРезультат.Успешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Получатель_ЭкранироватьЗначенияЗаголовков(ПараметрыПолучателя, булЭкранировать = Истина)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");	
	
	сткРезультатПроверки = РаботаСКафкаСервер.Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	ПараметрыПолучателя.ОбъектКафка.EscapeMessageHeaderValue = булЭкранировать;
	сткРезультат.Успешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

// Функция - Получатель прочитать список сообщения в пул
//		Читает список сообщений из брокера - цикл получения организован внутри ВК, что быстее чем использование метода "Получатель_ПрочитатьСообщенияВПул"
//
// Параметры:
//  чслКоличество				 - Число	 - Количество сообщений, которые необходимо получить
//  чслТайимаутНаОдно			 - Число	 - Ожидание оджного сообщения
//  чслМаксимумТаймаутов		 - Число	 - Количество ошибок, в том числе таймаутов, после которого получение будет прервано
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки
//      Успешно 				- Истина, если успешно
//		чКоличествоПрочитано	- Количество прочитанных сообщений
//		ОписаниеОшибки 		- содержит описание ошибки, в случае неудачи, при выпонении операции
//  
//Получает сообщения из брокера и помещает их во внутренний пул ВК, получение выполняется из "маршрутов", которые назначены получателю (c помощью фунцкии "Получатель_Назначить") 
//или из разделов назначенных получателю брокером (для топиков, на которые выполнялась подписка с помощью функции "Получатель_Подписаться")
//
//
//При подписании на топик - мы читаем из всех его партиций, и в какой-либо могут закочиться сообщения,
// а в любой другой - нет, при этом при чтении из той, где сообщения закончились - мы получим таймаут
// поэтому если мы подписывались на топик, а не назначали партицию для чтения - имеет смысл после первого таймаута
// - делать еще попытки, также таймауты могут быть при перебалансировке нагрузки брокером - RebalanceCb 
// - при подписке на топик еще одного получателя с такой же группой, как у текущего - партиции будут перераспределены
// брокером между получателями
Функция Получатель_ПрочитатьСписокСообщенийВПул(ПараметрыПолучателя, Знач чслКоличество, Знач чслТайимаутНаОдно, Знач ErrorCountToInterrupt = 1)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("булТаймаут", Ложь);
	сткРезультат.Вставить("FatalError", Ложь);

	сткРезультат.Вставить("чКоличествоПрочитано", 0);	
	сткРезультат.Вставить("ОписаниеОшибки", "");
	
	сткРезультатПроверки = РаботаСКафкаСервер.Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	

	Результат = ПараметрыПолучателя.ОбъектКафка.ConsumePool(чслТайимаутНаОдно, чслКоличество, ErrorCountToInterrupt);
	Если Результат <> 1 Тогда
		сткРезультат.ОписаниеОшибки = ПараметрыПолучателя.ОбъектКафка.ErrorDescription;
	КонецЕсли;
	
	сткРезультат.булТаймаут = (сткРезультат.ОписаниеОшибки = "Local: Timed out") ИЛИ (сткРезультат.ОписаниеОшибки = "Timeout: Local: Timed out")
		ИЛИ (сткРезультат.ОписаниеОшибки = "Local queue is full");
	сткРезультат.Успешно = (сткРезультат.булТаймаут ИЛИ Результат = 1) И НЕ ПараметрыПолучателя.ОбъектКафка.FatalError;
	сткРезультат.FatalError = ПараметрыПолучателя.ОбъектКафка.FatalError;
	
	сткРезультат.чКоличествоПрочитано = ПараметрыПолучателя.ОбъектКафка.GetMessagePoolLength();		
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель прочитать список сообщений
//		
//
// Параметры:
//  булПолучатьBase64	- Булево	 - Есдли ИСТИНА - тело сообщения, ключи и значения заголовков -  будут содержать строки в формате Base64 
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрСообщения, стрОписнаиеОшибки)
//      Успешно 			- Истина, если успешно
//		стрСообщения		- Сообщения в формате JSON
//		ОписаниеОшибки 	- Cодержит описание ошибки, в случае неудачи, при выпонении операции
// 
//Получает сообщения из внутреннего пула ВК в формате JSON
//Если сообщения содержат двоичные данные - необходимо вызывать функцию с флагом булПолучатьBase64 = ИСТИНА, иначе JSON сформировать не удастся
Функция Получатель_ПолучитьСообщенияИзПулаJSON(ПараметрыПолучателя, Знач булПолучатьBase64)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("стрСообщения", Неопределено);
	сткРезультат.Вставить("ОписаниеОшибки", "");	
	
	сткРезультатПроверки = РаботаСКафкаСервер.Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	//Читаем из пула компоненты	
	сткРезультат.стрСообщения = ПараметрыПолучателя.ОбъектКафка.ReceiveJSONMessages(булПолучатьBase64);
	Если  сткРезультат.стрСообщения = Неопределено Тогда
		сткРезультат.ОписаниеОшибки = ПараметрыПолучателя.ОбъектКафка.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	

	//Очищаем пул компоненты	
	Результат = ПараметрыПолучателя.ОбъектКафка.ClearMessagePool();
	Если Результат <> Истина Тогда
		сткРезультат.ОписаниеОшибки = ПараметрыПолучателя.ОбъектКафка.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.Успешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции   

Функция JSONВСтруктуру(п_стрJSON)
		
	_сткРезультат = Новый Структура();
	
	_сткРезультат.Вставить("Успешно",        Ложь);
	_сткРезультат.Вставить("масДанные",         Неопределено);
	_сткРезультат.Вставить("ОписаниеОшибки", "");
	
	_Чтение = Новый ЧтениеJSON;
	_Чтение.УстановитьСтроку(п_стрJSON);
	
	Попытка
		_Данные = ПрочитатьJSON(_Чтение, Ложь);
		
		Если ТипЗнч(_Данные) = Тип("Структура") Тогда
			_сткРезультат.масДанные = Новый Массив();	
			_сткРезультат.масДанные.Добавить(_Данные);
		ИначеЕсли ТипЗнч(_Данные) = Тип("Массив") Тогда
			_сткРезультат.масДанные = _Данные;				
		Иначе
			ВызватьИсключение "Не верный тип данных!";
		КонецЕсли;
		
		_сткРезультат.Успешно = Истина;
	Исключение
		_сткРезультат.ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;	
	
	_Чтение.Закрыть();
	
	Возврат _сткРезультат;	
КонецФункции

// Функция - Получатель зафиксировать смещения
// 
// Возвращаемое значение:
// - Структура - (Успешно, стрОписнаиеОшибки
//      Успешно 			- Истина, если успешно
//		ОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Записывает в брокер последние прочитанные смещения разделов
//Нужно вызывать после вызово функций чтения "Получатель_ПолучитьСообщения", "Получатель_ПрочитатьСписокСообщений", "Получатель_ПолучитьСообщенияJSON"
Функция Получатель_ЗафиксироватьСмещения(ПараметрыПолучателя)
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("Успешно", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");	
	
	сткРезультатПроверки = РаботаСКафкаСервер.Получатель_ПроверитьДоступностьОбъекта(ПараметрыПолучателя);
	Если Не сткРезультатПроверки.Успешно Тогда
		сткРезультат.ОписаниеОшибки = сткРезультатПроверки.ОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.Успешно = ПараметрыПолучателя.ОбъектКафка.Commit();
	Если сткРезультат.Успешно <> Истина Тогда 
		сткРезультат.ОписаниеОшибки = ПараметрыПолучателя.ОбъектКафка.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФУнкции

Процедура лимсЗагрузитьДанныеСообщенияВИБ(ТекстСообщения)
	
	сткРезультат = JSONВСтруктуру(ТекстСообщения);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтруктураДанных Из сткРезультат.масДанные Цикл
		Если СтруктураДанных.Свойство("Type") Тогда
			Если СтруктураДанных.Type = "ПриобретениеТоваровУслуг" Тогда
				лимсЗагрузитьПриобретениеТоваровУслуг(СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура лимсЗагрузитьПриобретениеТоваровУслуг(СтруктураДанных)
	
	ДокументСсылка = Документы.лимсПриобретениеТоваровУслуг.НайтиПоРеквизиту("ИдентификаторЕРП",
		СтруктураДанных.Ref);
	Если ДокументСсылка.Пустая() Тогда
		ДокументОбъект = Документы.лимсПриобретениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.ИдентификаторЕРП = СтруктураДанных.Ref;
	Иначе
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументОбъект.Дата = ПрочитатьДатуJSON(СтруктураДанных.Date, ФорматДатыJSON.ISO);
	ДокументОбъект.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Склад));
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;
	
	Для Каждого СтруктураТовары Из СтруктураДанных.Товары Цикл
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		СтрокаТовары.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовары.Номенклатура));
		СтрокаТовары.Серия = Справочники.СерииНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовары.Серия));
		СтрокаТовары.Количество = СтруктураТовары.Количество;
	КонецЦикла;
	
	Если СтруктураДанных.DeletionMark И Не ДокументОбъект.ПометкаУдаления Тогда
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	ИначеЕсли Не СтруктураДанных.DeletionMark И ДокументОбъект.ПометкаУдаления Тогда
		ДокументОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
	
	Если СтруктураДанных.Posted Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеСообщенияВИБ(ТекстСообщения)
	
	сткРезультат = JSONВСтруктуру(ТекстСообщения);
	Если Не сткРезультат.Успешно Тогда
		ВызватьИсключение сткРезультат.ОписаниеОшибки;
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтруктураДанных Из сткРезультат.масДанные Цикл
		Если СтруктураДанных.Свойство("Type") Тогда
			Если СтруктураДанных.Type = "лимсЛабораторноеИсследование" Тогда
				ЗагрузитьЛабораторноеИсследование(СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьЛабораторноеИсследование(СтруктураДанных)
	
	ДокументСсылка = Документы.ЛабораторноеИсследование.НайтиПоРеквизиту("ИдентификаторЛИМС",
		СтруктураДанных.Ref);
	Если ДокументСсылка.Пустая() Тогда
		ДокументОбъект = Документы.ЛабораторноеИсследование.СоздатьДокумент();
		ДокументОбъект.ИдентификаторЛИМС = СтруктураДанных.Ref;
	Иначе
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументОбъект.Дата = ПрочитатьДатуJSON(СтруктураДанных.Date, ФорматДатыJSON.ISO);
	ДокументОбъект.ДокументОснование = Документы.ПриобретениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ДокументОснование));
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;
	
	Для Каждого СтруктураТовары Из СтруктураДанных.Товары Цикл
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		СтрокаТовары.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовары.Номенклатура));
		СтрокаТовары.Серия = Справочники.СерииНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовары.Серия));
		СтрокаТовары.ПроцентСухогоВещества = СтруктураТовары.ПроцентСухогоВещества;
	КонецЦикла;
	
	Если СтруктураДанных.DeletionMark И Не ДокументОбъект.ПометкаУдаления Тогда
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	ИначеЕсли Не СтруктураДанных.DeletionMark И ДокументОбъект.ПометкаУдаления Тогда
		ДокументОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
	
	Если СтруктураДанных.Posted Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти